(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["wpe-lib-vendor"],{

/***/ "../node_modules/jquery-modal/jquery.modal.js":
/*!****************************************************!*\
  !*** ../node_modules/jquery-modal/jquery.modal.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n    A simple jQuery modal (http://github.com/kylefox/jquery-modal)\n    Version 0.9.2\n*/\n\n(function (factory) {\n    // Making your jQuery plugin work better with npm tools\n    // http://blog.npmjs.org/post/112712169830/making-your-jquery-plugin-work-better-with-npm\n    if ( true && typeof module.exports === \"object\") {\n        factory(__webpack_require__(/*! jquery */ \"jquery\"), window, document);\n    } else {\n        factory(jQuery, window, document);\n    }\n}(function ($, window, document, undefined) {\n\n    var modals = [],\n        getCurrent = function () {\n            return modals.length ? modals[modals.length - 1] : null;\n        },\n        selectCurrent = function () {\n            var i,\n                selected = false;\n            for (i = modals.length - 1; i >= 0; i--) {\n                if (modals[i].$blocker) {\n                    modals[i].$blocker.toggleClass('current', !selected).toggleClass('behind', selected);\n                    selected = true;\n                }\n            }\n        };\n\n    $.modal = function (el, options) {\n        var remove, target;\n        this.$body = $('body');\n        this.options = $.extend({}, $.modal.defaults, options);\n        this.options.doFade = !isNaN(parseInt(this.options.fadeDuration, 10));\n        this.$blocker = null;\n        if (this.options.closeExisting)\n            while ($.modal.isActive())\n                $.modal.close(); // Close any open modals.\n        modals.push(this);\n        if (el.is('a')) {\n            target = el.attr('href');\n            this.anchor = el;\n            //Select element by id from href\n            if (/^#/.test(target)) {\n                this.$elm = $(target);\n                if (this.$elm.length !== 1) return null;\n                this.$body.append(this.$elm);\n                this.open();\n                //AJAX\n            } else {\n                this.$elm = $('<div>');\n                this.$body.append(this.$elm);\n                remove = function (event, modal) {\n                    modal.elm.remove();\n                };\n                this.showSpinner();\n                el.trigger($.modal.AJAX_SEND);\n                $.get(target).done(function (html) {\n                    if (!$.modal.isActive()) return;\n                    el.trigger($.modal.AJAX_SUCCESS);\n                    var current = getCurrent();\n                    current.$elm.empty().append(html).on($.modal.CLOSE, remove);\n                    current.hideSpinner();\n                    current.open();\n                    el.trigger($.modal.AJAX_COMPLETE);\n                }).fail(function () {\n                    el.trigger($.modal.AJAX_FAIL);\n                    var current = getCurrent();\n                    current.hideSpinner();\n                    modals.pop(); // remove expected modal from the list\n                    el.trigger($.modal.AJAX_COMPLETE);\n                });\n            }\n        } else {\n            this.$elm = el;\n            this.anchor = el;\n            this.$body.append(this.$elm);\n            this.open();\n        }\n    };\n\n    $.modal.prototype = {\n        constructor: $.modal,\n\n        open: function () {\n            var m = this;\n            this.block();\n            this.anchor.blur();\n            if (this.options.doFade) {\n                setTimeout(function () {\n                    m.show();\n                }, this.options.fadeDuration * this.options.fadeDelay);\n            } else {\n                this.show();\n            }\n            $(document).off('keydown.modal').on('keydown.modal', function (event) {\n                var current = getCurrent();\n                if (event.which === 27 && current.options.escapeClose) current.close();\n            });\n            if (this.options.clickClose)\n                this.$blocker.click(function (e) {\n                    if (e.target === this)\n                        $.modal.close();\n                });\n        },\n\n        close: function () {\n            modals.pop();\n            this.unblock();\n            this.hide();\n            if (!$.modal.isActive())\n                $(document).off('keydown.modal');\n        },\n\n        block: function () {\n            this.$elm.trigger($.modal.BEFORE_BLOCK, [this._ctx()]);\n            this.$body.css('overflow', 'hidden');\n            this.$blocker = $('<div class=\"' + this.options.blockerClass + ' blocker current\"></div>').appendTo(this.$body);\n            selectCurrent();\n            if (this.options.doFade) {\n                this.$blocker.css('opacity', 0).animate({opacity: 1}, this.options.fadeDuration);\n            }\n            this.$elm.trigger($.modal.BLOCK, [this._ctx()]);\n        },\n\n        unblock: function (now) {\n            if (!now && this.options.doFade)\n                this.$blocker.fadeOut(this.options.fadeDuration, this.unblock.bind(this, true));\n            else {\n                this.$blocker.children().appendTo(this.$body);\n                this.$blocker.remove();\n                this.$blocker = null;\n                selectCurrent();\n                if (!$.modal.isActive())\n                    this.$body.css('overflow', '');\n            }\n        },\n\n        show: function () {\n            this.$elm.trigger($.modal.BEFORE_OPEN, [this._ctx()]);\n            if (this.options.showClose) {\n                this.closeButton = $('<a href=\"#close-modal\" rel=\"modal:close\" class=\"close-modal ' + this.options.closeClass + '\">' + this.options.closeText + '</a>');\n                this.$elm.append(this.closeButton);\n            }\n            this.$elm.addClass(this.options.modalClass).appendTo(this.$blocker);\n            if (this.options.doFade) {\n                this.$elm.css({opacity: 0, display: 'inline-block'}).animate({opacity: 1}, this.options.fadeDuration);\n            } else {\n                this.$elm.css('display', 'inline-block');\n            }\n            this.$elm.trigger($.modal.OPEN, [this._ctx()]);\n        },\n\n        hide: function () {\n            this.$elm.trigger($.modal.BEFORE_CLOSE, [this._ctx()]);\n            if (this.closeButton) this.closeButton.remove();\n            var _this = this;\n            if (this.options.doFade) {\n                this.$elm.fadeOut(this.options.fadeDuration, function () {\n                    _this.$elm.trigger($.modal.AFTER_CLOSE, [_this._ctx()]);\n                });\n            } else {\n                this.$elm.hide(0, function () {\n                    _this.$elm.trigger($.modal.AFTER_CLOSE, [_this._ctx()]);\n                });\n            }\n            this.$elm.trigger($.modal.CLOSE, [this._ctx()]);\n        },\n\n        showSpinner: function () {\n            if (!this.options.showSpinner) return;\n            this.spinner = this.spinner || $('<div class=\"' + this.options.modalClass + '-spinner\"></div>')\n                .append(this.options.spinnerHtml);\n            this.$body.append(this.spinner);\n            this.spinner.show();\n        },\n\n        hideSpinner: function () {\n            if (this.spinner) this.spinner.remove();\n        },\n\n        //Return context for custom events\n        _ctx: function () {\n            return {\n                elm: this.$elm,\n                $elm: this.$elm,\n                $blocker: this.$blocker,\n                options: this.options,\n                $anchor: this.anchor\n            };\n        }\n    };\n\n    $.modal.close = function (event) {\n        if (!$.modal.isActive()) return;\n        if (event) event.preventDefault();\n        var current = getCurrent();\n        current.close();\n        return current.$elm;\n    };\n\n    // Returns if there currently is an active modal\n    $.modal.isActive = function () {\n        return modals.length > 0;\n    };\n\n    $.modal.getCurrent = getCurrent;\n\n    $.modal.defaults = {\n        closeExisting: true,\n        escapeClose: true,\n        clickClose: true,\n        closeText: 'Close',\n        closeClass: '',\n        modalClass: \"modal\",\n        blockerClass: \"jquery-modal\",\n        spinnerHtml: '<div class=\"rect1\"></div><div class=\"rect2\"></div><div class=\"rect3\"></div><div class=\"rect4\"></div>',\n        showSpinner: true,\n        showClose: true,\n        fadeDuration: null,   // Number of milliseconds the fade animation takes.\n        fadeDelay: 1.0        // Point during the overlay's fade-in that the modal begins to fade in (.5 = 50%, 1.5 = 150%, etc.)\n    };\n\n    // Event constants\n    $.modal.BEFORE_BLOCK = 'modal:before-block';\n    $.modal.BLOCK = 'modal:block';\n    $.modal.BEFORE_OPEN = 'modal:before-open';\n    $.modal.OPEN = 'modal:open';\n    $.modal.BEFORE_CLOSE = 'modal:before-close';\n    $.modal.CLOSE = 'modal:close';\n    $.modal.AFTER_CLOSE = 'modal:after-close';\n    $.modal.AJAX_SEND = 'modal:ajax:send';\n    $.modal.AJAX_SUCCESS = 'modal:ajax:success';\n    $.modal.AJAX_FAIL = 'modal:ajax:fail';\n    $.modal.AJAX_COMPLETE = 'modal:ajax:complete';\n\n    $.fn.modal = function (options) {\n        if (this.length === 1) {\n            new $.modal(this, options);\n        }\n        return this;\n    };\n\n    // Automatically bind links with rel=\"modal:close\" to, well, close the modal.\n    $(document).on('click.modal', 'a[rel~=\"modal:close\"]', $.modal.close);\n    $(document).on('click.modal', 'a[rel~=\"modal:open\"]', function (event) {\n        event.preventDefault();\n        $(this).modal();\n    });\n}));\n\n\n//# sourceURL=webpack:///../node_modules/jquery-modal/jquery.modal.js?");

/***/ })

}]);